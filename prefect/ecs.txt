# Creating ECR repository to store images
# 886192468297.dkr.ecr.ap-southeast-2.amazonaws.com/prefect
resource "aws_ecr_repository" "ecr_prefect_images" {
  name                 = "ecr_prefect_images"
  image_tag_mutability = "MUTABLE"

  image_scanning_configuration {
    scan_on_push = false
  }
}

resource "aws_iam_user" "ecr_prefect_user" {
  name = "ecr-prefect-user"
}

data "aws_iam_policy" "ecr_prefect_full_access" {
  arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
}

resource "aws_iam_user_policy_attachment" "ecr_prefect_user_policy" {
  user       = aws_iam_user.ecr_prefect_user.name
  policy_arn = data.aws_iam_policy.ecr_prefect_full_access.arn
}

# ECS Cluster

resource "aws_cloudwatch_log_group" "ecs_prefect_cloudwatch" {
  name              = "ecs-prefect-cloudwatch"
  retention_in_days = 7
}

resource "aws_ecs_cluster" "ecs_prefect_cluster" {
  name = "ecs-prefect-cluster"

  configuration {
    execute_command_configuration {
      logging    = "OVERRIDE"
      log_configuration {
        cloud_watch_encryption_enabled = true
        cloud_watch_log_group_name     = aws_cloudwatch_log_group.ecs_prefect_cloudwatch.name
      }
    }
  }
}

# Creating a VPC
resource "aws_vpc" "prefect_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
}

resource "aws_internet_gateway" "prefect_gateway" {
  vpc_id = aws_vpc.prefect_vpc.id
}

resource "aws_route_table" "prefect_route_table" {
  vpc_id = aws_vpc.prefect_vpc.id
}

resource "aws_egress_only_internet_gateway" "prefect_egress" {
  vpc_id = aws_vpc.prefect_vpc.id
}

resource "aws_route" "prefect_route_gateway" {
  route_table_id            = aws_route_table.prefect_route_table.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.prefect_gateway.id
}

resource "aws_subnet" "prefect_subnet" {
  vpc_id     = aws_vpc.prefect_vpc.id
  cidr_block = "10.0.0.0/16"

  map_public_ip_on_launch = true
}

resource "aws_route_table_association" "prefect_subnet_association" {
  subnet_id      = aws_subnet.prefect_subnet.id
  route_table_id = aws_route_table.prefect_route_table.id
}

/*
data "aws_cloudformation_stack" "prefect_vpc" {
  name = "prefect-vpc"
}

resource "aws_security_group" "prefect_agent_security_group" {
  name        = "prefect-agent-security-group"
  description = "Default security for prefect fargate agent"
  vpc_id      = "${data.aws_cloudformation_stack.prefect_vpc.outputs["VPC"]}"

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "prefect_tls"
  }
}
*/

# Execution role - mainly used by prefect fargate agent
resource "aws_iam_role" "prefect_execution_role" {
  name = "${var.account_id}-prefect-execution-role"
  assume_role_policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Principal" : {
          "Service" : [
              "ecs-tasks.amazonaws.com",
              "ec2.amazonaws.com",
              "ecs.amazonaws.com"
          ]
        },
        "Action" : "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "prefect_ecs_task_execution_policy_attachment" {
  role       = aws_iam_role.prefect_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

resource "aws_iam_policy" "prefect_execution_policy" {
  name = "${var.account_id}-prefect-execution-policy"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:PutObject"
        ]
        Effect = "Allow"
        Resource = [
          "arn:aws:s3:::ap-southeast-2-886192468297-prefect/flows",
          "arn:aws:s3:::ap-southeast-2-886192468297-prefect/flows/*"
        ]
      },
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
      {
        Action = [
          "ecs:RegisterTaskDefinition",
          "ecs:RunTask",
          "ecs:DescribeTaskDefinition"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "prefect_ecs_execution_policy_attachment" {
  role       = aws_iam_role.prefect_execution_role.name
  policy_arn = aws_iam_policy.prefect_execution_policy.arn
}

# Task role

resource "aws_iam_role" "prefect_task_role" {
  name = "${var.account_id}-prefect-task-role"
  assume_role_policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Principal" : {
          "Service" : [
              "ecs-tasks.amazonaws.com",
              "ec2.amazonaws.com",
              "ecs.amazonaws.com"
          ]
        },
        "Action" : "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_policy" "prefect_task_policy" {
  name = "${var.account_id}-prefect-task-policy"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:PutObject"
        ]
        Effect = "Allow"
        Resource = [
          "arn:aws:s3:::ap-southeast-2-886192468297-prefect/flows",
          "arn:aws:s3:::ap-southeast-2-886192468297-prefect/flows/*"
        ]
      },
      {
        Action = [
          "ecs:RegisterTaskDefinition",
          "ecs:RunTask"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "prefect_ecs_task_policy_attachment" {
  role       = aws_iam_role.prefect_task_role.name
  policy_arn = aws_iam_policy.prefect_task_policy.arn
}
# ESC task definition
